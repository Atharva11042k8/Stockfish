/*
  Stockfish, a UCI chess playing engine derived from Glaurung 2.1
  Copyright (C) 2004-2021 The Stockfish developers (see AUTHORS file)

  Stockfish is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Stockfish is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

// Code for calculating NNUE evaluation function

#include <iostream>
#include <set>

#include "../evaluate.h"
#include "../position.h"
#include "../misc.h"
#include "../uci.h"
#include "../types.h"

#include "evaluate_nnue.h"

namespace Eval::NNUE {

  // Input feature converter
  LargePagePtr<FeatureTransformer> feature_transformer;

  // Evaluation function
  AlignedPtr<Network> network;

  // Evaluation function file name
  std::string fileName;

  namespace Detail {

  // Initialize the evaluation function parameters
  template <typename T>
  void Initialize(AlignedPtr<T>& pointer) {

    pointer.reset(reinterpret_cast<T*>(std_aligned_alloc(alignof(T), sizeof(T))));
    std::memset(pointer.get(), 0, sizeof(T));
  }

  template <typename T>
  void Initialize(LargePagePtr<T>& pointer) {

    static_assert(alignof(T) <= 4096, "aligned_large_pages_alloc() may fail for such a big alignment requirement of T");
    pointer.reset(reinterpret_cast<T*>(aligned_large_pages_alloc(sizeof(T))));
    std::memset(pointer.get(), 0, sizeof(T));
  }

  // Read evaluation function parameters
  template <typename T>
  bool ReadParameters(std::istream& stream, T& reference) {

    std::uint32_t header;
    header = read_little_endian<std::uint32_t>(stream);
    if (!stream || header != T::GetHashValue()) return false;
    return reference.ReadParameters(stream);
  }

  }  // namespace Detail

  // Initialize the evaluation function parameters
  void Initialize() {

    Detail::Initialize(feature_transformer);
    Detail::Initialize(network);
  }

  // Read network header
  bool ReadHeader(std::istream& stream, std::uint32_t* hash_value, std::string* architecture)
  {
    std::uint32_t version, size;

    version     = read_little_endian<std::uint32_t>(stream);
    *hash_value = read_little_endian<std::uint32_t>(stream);
    size        = read_little_endian<std::uint32_t>(stream);
    if (!stream || version != kVersion) return false;
    architecture->resize(size);
    stream.read(&(*architecture)[0], size);
    return !stream.fail();
  }

  // Read network parameters
  bool ReadParameters(std::istream& stream) {

    std::uint32_t hash_value;
    std::string architecture;
    if (!ReadHeader(stream, &hash_value, &architecture)) return false;
    if (hash_value != kHashValue) return false;
    if (!Detail::ReadParameters(stream, *feature_transformer)) return false;
    if (!Detail::ReadParameters(stream, *network)) return false;
    return stream && stream.peek() == std::ios::traits_type::eof();
  }

  // Evaluation function. Perform differential calculation.
  Value evaluate(const Position& pos) {

    // We manually align the arrays on the stack because with gcc < 9.3
    // overaligning stack variables with alignas() doesn't work correctly.

    constexpr uint64_t alignment = kCacheLineSize;

#if defined(ALIGNAS_ON_STACK_VARIABLES_BROKEN)
    TransformedFeatureType transformed_features_unaligned[
      FeatureTransformer::kBufferSize + alignment / sizeof(TransformedFeatureType)];
    char buffer_unaligned[Network::kBufferSize + alignment];

    auto* transformed_features = align_ptr_up<alignment>(&transformed_features_unaligned[0]);
    auto* buffer = align_ptr_up<alignment>(&buffer_unaligned[0]);
#else
    alignas(alignment)
      TransformedFeatureType transformed_features[FeatureTransformer::kBufferSize];
    alignas(alignment) char buffer[Network::kBufferSize];
#endif

    ASSERT_ALIGNED(transformed_features, alignment);
    ASSERT_ALIGNED(buffer, alignment);

    feature_transformer->Transform(pos, transformed_features);
    const auto output = network->Propagate(transformed_features, buffer);

    return static_cast<Value>(output[0] / FV_SCALE);
  }

  // Load eval, from a file stream or a memory stream
  bool load_eval(std::string name, std::istream& stream) {

    Initialize();
    fileName = name;
    return ReadParameters(stream);
  }

} // namespace Eval::NNUE


//#include "../eigen3/Eigen/Dense"
#include "../eigen3/Eigen/SVD"

int8_t* wP = nullptr;
int32_t* bP = nullptr;

int TuneS[10] = { 0 };
int TuneB[32] = { -6683, 8069, -4843, -8680, 9799, -11012, -10695, 571, -5559, -5293, -2670, -6079, 1297, -1331, -9148, -10851,
                  -3941, -4830, -2393, -6169, 2991, -2562, -4842, -11015, 5335, -2852, 1087, 2347, -1115, -733, -2040, -5415 };

constexpr int WI = 32, HI = 32;
//typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Mtx;
typedef Eigen::Matrix<double, HI, WI> Mtx;
Mtx W, U, VT, SM;

const double Sigma[HI] =
{
422.480247, 289.534326, 213.541190, 208.963387, 176.952267, 169.801769, 147.860965, 144.090919,
120.681920, 111.618569, 106.755820, 103.956354, 88.577181, 83.986560, 83.217684, 71.941271, 70.971172,
65.430800, 54.859915, 48.747865, 46.027962, 38.768562, 34.044049, 32.005703, 23.435561, 22.057395,
13.932836, 12.061014, 9.696236, 6.818233, 3.427622, 1.558273
};

extern const double Udata[WI * HI];
extern const double VTdata[WI * HI];

void initSVD()
{
    for (int i = 0; i < HI; ++i)
        for (int j = 0; j < WI; ++j)
            W(i, j) = wP[i * WI + j];


    for (int i = 0; i < HI; ++i)
        for (int j = 0; j < HI; ++j)
            U(i, j) = Udata[i * HI + j];

    for (int i = 0; i < WI; ++i)
        for (int j = 0; j < WI; ++j)
            VT(i, j) = VTdata[i * WI + j];

    SM.setZero();
    for (int i = 0; i < HI; ++i)
        SM(i, i) = Sigma[i];
}

void updateW()
{
    if (!wP)
        return;

    // Tune the first 10 biggest singular values
    for (int i = 0; i < 10; ++i)
        if (TuneS[i] > 0)
            SM(i, i) = Sigma[i] * (100.0 + TuneS[i] * (9.0 + i) / 18.0) / 100.0;
        else
            SM(i, i) = Sigma[i] * 100.0 / (100.0 - TuneS[i] * (9.0 + i) / 18.0);

    // Reconstruct matrix
    Mtx WNew = U * SM * VT;
    //Mtx Delta = W - WNew;

    for (int i = 0; i < HI; ++i)
        for (int j = 0; j < WI; ++j)
        {
            double w = WNew(i, j);
            int iw = std::min(std::max((int)round(w), -127), 127);
            wP[i * WI + j] = iw;
        }

#if defined (USE_SSSE3)
    // Permute weights
    int8_t tmp[HI * WI];
    std::memcpy(tmp, wP, HI * WI);

    for (std::size_t i = 0; i < HI * WI; ++i)
        wP[
           (i / 4) % (WI / 4) * HI * 4 +
            i / WI * 4 +
            i % 4
          ] = tmp[i];
#endif
}

void updateB()
{
    if (!bP)
        return;

    for (int i = 0; i < 32; ++i)
        bP[i] = TuneB[i];
}

#if 1
auto rangeFuncW = [](int m) { return std::pair<int, int>(m - 40, m + 40); };
TUNE(SetRange(rangeFuncW), TuneS, updateW);

auto rangeFuncB = [](int m) { return std::pair<int, int>(m - 1500, m + 1500); };
TUNE(SetRange(rangeFuncB), TuneB, updateB);

UPDATE_ON_LAST();
#endif

const double Udata[WI * HI] =
{
    0.026400, -0.030819, -0.028194, -0.101931, 0.035653, -0.285708, -0.155180, 0.058206, 0.331042, 0.264299, 0.112432, -0.025919,
-0.054112, 0.189469, -0.035061, -0.099823, 0.034647, -0.236076, 0.312178, -0.148174, -0.016151, -0.325500, 0.058264, -0.084361,
-0.112670, -0.110423, -0.385349, -0.000579, 0.212162, 0.155525, 0.211277, 0.231814, 0.174359, 0.021305, 0.525414, 0.489582,
-0.362153, -0.092117, 0.003150, 0.127472, -0.164325, 0.216887, -0.004852, -0.188088, -0.086380, -0.025029, -0.140969, -0.110128,
0.071299, 0.074249, -0.166816, 0.084018, -0.073286, -0.219222, 0.055463, -0.032393, -0.153799, 0.000116, 0.052035, 0.118154,
0.062400, 0.009043, 0.024305, 0.006099, 0.275371, 0.336783, -0.015948, 0.229516, 0.361485, -0.005632, -0.220538, 0.201897,
-0.075882, -0.092699, -0.027160, 0.154292, -0.160779, -0.123918, 0.082035, -0.339958, 0.071099, 0.117280, -0.064450, 0.057295,
0.112271, 0.050549, -0.065448, 0.245202, 0.010920, -0.179069, -0.160815, -0.383434, -0.070594, 0.073264, -0.009451, 0.118280,
-0.079963, 0.138533, 0.152970, 0.086385, 0.256628, -0.183921, 0.182853, -0.466232, 0.111581, 0.369167, -0.310107, 0.081134,
-0.140331, -0.148187, 0.274059, -0.086107, -0.029509, -0.179914, -0.265409, -0.225414, 0.100378, 0.125310, 0.019994, -0.159003,
0.007500, 0.016252, 0.056112, 0.038312, 0.012163, 0.052902, 0.001963, -0.059674, 0.250476, 0.024582, 0.257330, -0.222123,
0.050381, 0.025938, 0.073400, -0.092550, 0.101507, -0.119195, 0.074178, -0.195498, -0.133779, -0.119314, -0.005001, 0.222595,
-0.110518, 0.082864, 0.062822, 0.042915, -0.124381, 0.063709, 0.064859, -0.169228, -0.244568, 0.106690, -0.309219, -0.337684,
0.136673, 0.168483, -0.334136, -0.370402, -0.330118, 0.400198, -0.037517, 0.141297, 0.058365, 0.123409, 0.310273, 0.004674,
-0.119568, -0.140041, -0.159737, -0.363223, -0.120950, 0.008829, 0.025927, 0.251410, 0.296709, 0.051039, 0.225077, -0.163094,
-0.158617, -0.143353, 0.166086, 0.046667, 0.091186, 0.026166, -0.035472, -0.168730, -0.003268, 0.056103, 0.142250, 0.138311,
0.406694, 0.357288, -0.214984, -0.093170, -0.007332, -0.271389, 0.243017, -0.053779, -0.153179, 0.147623, 0.046017, 0.167796,
0.254820, 0.114448, -0.166886, -0.047622, 0.105124, 0.098828, 0.065808, 0.042098, -0.354707, -0.028523, -0.172997, -0.307465,
0.058072, 0.099043, 0.114630, -0.040958, -0.067034, -0.089448, 0.097884, -0.067984, -0.004999, -0.064581, 0.107712, -0.052055,
-0.386917, 0.194596, 0.208688, -0.124234, -0.063037, -0.096217, 0.420266, 0.085588, -0.093888, -0.050762, 0.113482, -0.222444,
-0.039353, -0.232455, -0.132704, -0.275298, -0.036095, 0.040401, -0.156949, -0.112551, 0.261631, 0.035724, -0.121206, -0.335852,
-0.169557, 0.079452, 0.089174, 0.185895, -0.240779, 0.314264, 0.011209, -0.154333, -0.088598, -0.114976, -0.134528, -0.019382,
0.039990, -0.071597, 0.045766, 0.028234, -0.039020, 0.085849, 0.198651, 0.022099, -0.223971, 0.226688, -0.271886, 0.154575,
0.169467, -0.523893, -0.248521, 0.040245, 0.151762, 0.295010, -0.090841, 0.008757, 0.034594, -0.016641, 0.063622, -0.177405,
-0.199866, 0.179684, 0.057333, -0.064058, -0.054650, -0.079309, 0.058329, 0.085649, -0.023869, -0.018763, -0.044401, -0.034116,
-0.064183, 0.092583, 0.004003, -0.120035, -0.142317, 0.048826, 0.020554, 0.055983, -0.037664, 0.011716, -0.034044, -0.285634,
0.154389, -0.381805, -0.138353, 0.112929, 0.049216, -0.334533, -0.605086, 0.276993, -0.070605, 0.272429, 0.103089, -0.216180,
-0.198097, 0.282406, -0.137370, 0.028807, -0.309757, 0.313865, 0.067350, 0.184607, 0.294591, -0.041241, 0.308355, 0.010073,
0.089813, 0.012918, 0.255948, -0.113146, 0.249837, 0.010076, 0.077169, 0.006896, -0.366610, -0.068097, 0.052250, -0.045168,
0.057086, -0.049682, -0.043273, -0.038953, 0.017110, 0.038406, 0.083774, 0.257718, 0.050765, -0.077488, 0.031553, -0.568208,
-0.044952, -0.271642, 0.185907, 0.212534, 0.222746, 0.101567, -0.124843, 0.013279, -0.330671, 0.203289, 0.177857, -0.078313,
0.007766, -0.134719, 0.289960, 0.192535, -0.080757, -0.079044, -0.012987, -0.010069, 0.047614, -0.044947, -0.013017, 0.125829,
0.089636, 0.233886, -0.274488, 0.101709, -0.309079, 0.076543, -0.310085, -0.042812, 0.021080, -0.072138, -0.019432, 0.173560,
-0.409057, -0.079667, -0.163762, 0.103898, -0.027926, 0.043068, 0.013756, -0.161740, 0.141436, 0.092693, 0.309731, -0.303140,
0.159468, -0.141854, 0.000224, 0.115236, 0.090667, -0.001076, 0.137326, -0.271006, 0.276583, 0.199457, 0.006790, -0.078166,
0.011853, -0.101208, 0.076218, 0.089980, -0.090940, -0.042886, 0.126650, -0.113265, -0.021876, 0.158380, 0.039028, 0.050863,
-0.046747, -0.131654, 0.056408, -0.136519, 0.258177, 0.032908, 0.086691, 0.160077, 0.225087, 0.164644, 0.211081, 0.314680,
0.031230, 0.532335, -0.343008, 0.138002, 0.072205, 0.130278, 0.049518, 0.329776, 0.108227, 0.261638, 0.357543, 0.336846,
0.392127, -0.151055, 0.033271, 0.329211, 0.078153, 0.191385, 0.058462, 0.130555, -0.085052, -0.200464, -0.021851, -0.070384,
0.172415, -0.041323, -0.010924, -0.139951, -0.155008, 0.151076, -0.001908, 0.051428, 0.085160, -0.171590, -0.018420, -0.073134,
-0.198979, 0.360833, 0.032689, -0.131312, -0.137225, -0.018159, -0.098043, 0.079548, 0.172132, -0.122241, -0.102049, -0.071931,
0.394729, -0.204200, -0.303154, -0.120105, -0.165875, -0.312976, -0.318916, 0.145402, -0.111455, 0.186819, 0.222590, 0.026012,
-0.116564, -0.000111, -0.058632, -0.023261, 0.019510, 0.183156, 0.086430, 0.089283, -0.054806, -0.031072, 0.139525, -0.016782,
-0.018616, -0.282806, -0.222875, -0.004273, 0.075982, -0.137417, 0.061218, 0.042271, 0.230789, 0.335384, -0.091996, 0.252799,
0.461211, 0.048220, -0.337173, -0.367891, 0.136275, 0.059792, -0.015507, 0.033437, 0.006845, -0.144609, 0.024460, -0.192070,
-0.045001, -0.079708, -0.115581, -0.100985, -0.208580, 0.101311, -0.030942, 0.017249, 0.014081, -0.245824, -0.000121, 0.139901,
0.172855, 0.009628, 0.281995, 0.019746, -0.179460, -0.121736, 0.067126, -0.099684, -0.089138, -0.110366, 0.136883, -0.150815,
-0.252374, -0.123816, 0.058194, 0.161503, -0.248053, -0.142997, 0.307630, 0.047510, -0.482563, 0.002505, -0.140643, -0.302981,
-0.045271, -0.071474, 0.126687, 0.024274, 0.036962, -0.232279, 0.094157, 0.108176, 0.089194, 0.129932, 0.232952, 0.042004,
0.156600, -0.088387, 0.244893, 0.027508, 0.143906, 0.007992, 0.096746, 0.420726, 0.156040, 0.052563, 0.512680, -0.094050,
0.407877, 0.028435, 0.025067, -0.172874, -0.053950, -0.081252, 0.050981, -0.103169, 0.066975, -0.013556, -0.139610, 0.170204,
-0.139214, 0.052586, 0.028412, 0.009726, 0.316197, -0.026736, -0.006141, -0.310239, 0.317024, -0.102783, 0.260779, -0.129796,
-0.108024, 0.199194, 0.064870, -0.114573, -0.020269, 0.001001, -0.208696, -0.022649, 0.146092, -0.383444, 0.254921, -0.096822,
0.331017, 0.157217, 0.046589, -0.196387, 0.064208, -0.095881, -0.147424, -0.176889, -0.337295, -0.298140, 0.427742, 0.018776,
0.043771, -0.093243, -0.258646, 0.197049, -0.120414, -0.267888, -0.146984, 0.033372, 0.100990, 0.035646, 0.011537, 0.086181,
0.351577, -0.168896, -0.020427, 0.207537, -0.172530, -0.165259, 0.069456, -0.180568, 0.060570, 0.016980, -0.048495, 0.083102,
0.156512, -0.040191, 0.053553, -0.101896, -0.097136, 0.070629, -0.126680, 0.056322, 0.128892, 0.122798, -0.371734, -0.187458,
-0.027591, 0.353905, -0.039577, -0.001199, -0.360580, 0.036012, 0.078183, -0.058910, 0.110371, -0.044046, 0.164317, -0.094499,
0.019776, 0.092004, 0.299216, -0.407305, -0.324169, -0.085568, 0.041951, 0.158104, -0.094776, -0.008583, -0.273815, 0.229416,
-0.074865, -0.024697, 0.093176, -0.123910, -0.190306, 0.102194, -0.048719, -0.242402, 0.093955, 0.271642, -0.178566, -0.311402,
0.005802, -0.312316, 0.116220, 0.064630, 0.243986, 0.042176, -0.046969, 0.154004, 0.031029, 0.094079, -0.238918, -0.100014,
-0.020791, -0.114221, -0.163156, -0.440834, -0.036516, -0.078362, -0.341786, 0.130018, -0.075784, -0.134634, 0.113815, 0.175163,
0.052977, 0.170100, 0.117858, -0.167727, 0.097940, -0.111052, 0.094923, -0.070242, -0.104050, 0.468979, -0.188306, -0.274585,
0.078999, 0.194170, 0.197439, -0.045962, -0.196697, 0.280485, -0.289901, 0.064995, -0.138970, -0.011429, -0.055213, 0.163963,
0.287947, 0.177148, 0.147757, -0.260068, 0.061458, -0.038766, 0.171129, 0.031209, -0.012505, 0.001626, 0.168484, -0.318931,
-0.079605, 0.021250, 0.025254, 0.113877, -0.184614, -0.054529, -0.104916, -0.096596, 0.152721, 0.144369, 0.018899, 0.285694,
0.034881, -0.237458, -0.118241, 0.221868, -0.025938, -0.434021, 0.336210, -0.060078, 0.104468, -0.053635, 0.096726, 0.084120,
-0.086747, -0.352105, -0.187076, 0.087515, -0.161585, -0.480620, -0.248906, -0.075520, 0.136650, -0.227086, 0.324319, -0.069239,
-0.040563, -0.222672, 0.253739, -0.178594, 0.027090, 0.039218, -0.059008, -0.176279, -0.017045, 0.234871, -0.062703, 0.089838,
-0.033118, -0.183198, 0.062570, 0.016486, 0.156332, 0.134141, -0.085955, 0.172061, -0.374594, 0.021234, -0.126723, -0.178432,
0.284163, 0.118388, -0.153273, 0.089627, 0.010351, 0.061457, 0.274413, 0.312371, 0.083121, -0.064486, 0.072060, 0.216833,
-0.217492, 0.174781, -0.137052, 0.339759, 0.074988, 0.015198, -0.253711, 0.070348, -0.229338, -0.016061, -0.129466, 0.093368,
0.063933, 0.135596, -0.131862, -0.001898, -0.025977, 0.010702, -0.163822, -0.240636, 0.256797, -0.029562, 0.277480, -0.233730,
-0.171465, -0.092333, -0.030165, -0.121076, 0.249345, -0.082495, 0.004717, 0.136204, 0.091794, 0.054277, -0.028947, 0.007859,
-0.196868, 0.328647, 0.345877, -0.093506, 0.253497, -0.327989, -0.131178, 0.242188, 0.195826, -0.063096, -0.024205, -0.244210,
-0.065935, 0.242654, 0.088664, -0.087295, 0.123606, -0.213419, -0.202202, 0.009891, -0.000459, 0.175157, 0.221141, -0.451273,
0.299664, 0.073366, -0.166391, -0.030448, -0.206762, -0.241691, 0.373886, 0.070074, -0.045998, -0.011074, -0.062223, 0.206309,
-0.039351, -0.031234, -0.057314, -0.097743, -0.127687, 0.097356, 0.148327, -0.017954, -0.044096, -0.061061, 0.084755, -0.144426,
0.123509, -0.221626, 0.053330, -0.083475, -0.088329, 0.269335, 0.031934, -0.171800, 0.135240, 0.214164, 0.137638, 0.300233,
0.267147, 0.301852, -0.191304, -0.281678, -0.240872, -0.116510, -0.038863, 0.156053, -0.267841, 0.243579, 0.229003, 0.022048,
0.074085, -0.080186, -0.336269, 0.117291, 0.020796, -0.085407, 0.018172, -0.013336, -0.298984, -0.101398, 0.118569, -0.107466,
-0.078612, 0.208444, 0.355591, 0.222544, -0.116017, -0.262885, -0.341632, 0.238073, -0.075773, -0.106438, 0.120670, -0.148469,
-0.310086, -0.234142, 0.054791, -0.095812, 0.065258, 0.100621, 0.048989, 0.112061, -0.206219, 0.030380, 0.100445, -0.078597,
-0.146991, -0.229700, 0.079038, 0.161893, -0.083021, -0.014711, -0.045074, 0.201162, -0.230976, 0.344457, 0.135688, -0.152436,
-0.137571, 0.092687, 0.037153, -0.028199, -0.272555, 0.391400, 0.058221, 0.247840, -0.027448, 0.133316, 0.100849, -0.109059,
0.442730, 0.000397, 0.089360, -0.060266
};

const double VTdata[WI * HI] =
{
-0.178397, 0.191654, 0.161928, 0.113231, -0.118678, 0.084323, 0.264598, -0.070230, -0.171650, 0.134719, 0.197313, -0.225090,
-0.245274, -0.147335, -0.088455, -0.066640, 0.156365, -0.335854, -0.216996, 0.113090, -0.191563, -0.038316, -0.262022, -0.132694,
-0.260477, -0.034117, -0.233905, 0.144465, 0.236794, -0.061037, 0.135619, -0.143466, -0.029974, -0.102013, 0.035322, 0.227015,
0.112854, 0.132409, -0.468237, 0.155849, -0.084755, -0.170070, -0.240129, -0.277334, -0.162227, -0.124377, 0.198121, -0.103355,
0.084479, -0.281355, -0.130769, 0.016982, 0.057526, -0.085304, -0.063913, 0.055577, 0.137054, -0.000332, -0.218964, 0.027985,
-0.348592, -0.204157, -0.214456, -0.039472, 0.163759, 0.159156, 0.306099, -0.442141, 0.058960, 0.018444, -0.299791, 0.120518,
-0.117299, 0.128519, -0.011469, 0.092272, 0.114327, 0.051037, -0.083290, 0.061840, -0.084972, 0.201236, -0.043985, 0.191508,
0.099069, 0.064121, -0.476187, -0.049260, -0.166722, -0.075264, 0.021961, -0.078988, 0.031423, -0.227584, -0.184183, -0.169621,
-0.048254, 0.001807, 0.048253, 0.273777, 0.093780, -0.003801, 0.129619, 0.017851, -0.089811, -0.209193, -0.079938, 0.029436,
0.344091, 0.146009, 0.118840, 0.104092, 0.035062, 0.138331, -0.003230, -0.208377, 0.294717, 0.290150, -0.306266, -0.006096,
-0.214441, -0.016600, -0.447005, 0.051398, -0.004574, 0.090012, 0.117923, 0.266976, 0.030638, -0.162602, 0.114436, 0.178270,
-0.001805, 0.138007, 0.011758, 0.065085, 0.139494, 0.096763, 0.039758, -0.439847, 0.507504, 0.007092, -0.137372, 0.158707,
0.062580, 0.128764, 0.077692, 0.367114, 0.014735, -0.018201, 0.184669, -0.061447, -0.052586, 0.012907, 0.053588, 0.143061,
-0.123559, -0.051861, 0.202133, -0.306544, -0.060261, -0.346515, 0.017035, -0.151263, -0.159838, 0.128441, -0.090460, 0.016824,
0.186073, -0.056639, -0.088241, 0.224874, 0.128845, 0.086654, -0.245438, 0.082037, 0.059753, -0.251653, 0.118371, -0.018864,
-0.506117, 0.023798, -0.225683, 0.005753, -0.103489, -0.227729, -0.063799, 0.175061, -0.251812, 0.209203, -0.005107, 0.148006,
0.084561, -0.294063, 0.121645, 0.008346, 0.080784, 0.216923, 0.286545, 0.110603, -0.003066, -0.127358, -0.370120, 0.146404,
-0.175476, 0.156551, -0.187539, -0.289363, 0.063902, -0.005369, -0.246266, -0.078005, 0.101707, 0.232611, 0.004267, 0.072249,
-0.158426, 0.144552, 0.233537, -0.112250, -0.072467, -0.161663, 0.215414, -0.251545, -0.079611, -0.122821, -0.188147, -0.159657,
0.066697, 0.006813, 0.105186, 0.009186, 0.067307, 0.087701, -0.029672, -0.028531, -0.134365, -0.083957, 0.058030, -0.176231,
-0.222812, 0.279300, -0.029361, 0.238622, -0.223305, 0.366810, -0.041548, -0.037568, 0.438305, -0.060691, -0.473011, -0.030826,
0.018077, -0.022945, 0.107489, -0.150665, 0.030508, -0.033837, 0.063310, -0.092275, 0.186098, 0.492178, -0.251947, -0.040687,
0.027701, 0.133586, 0.336682, -0.072657, -0.259182, 0.151162, 0.060690, -0.068772, 0.218994, 0.333889, -0.098216, -0.067720,
-0.037843, -0.021168, 0.139523, -0.163845, -0.151994, 0.043732, -0.045004, -0.054473, -0.130146, 0.165168, 0.209655, 0.260128,
-0.006953, -0.282176, 0.178363, 0.139411, -0.185894, -0.241857, -0.007684, -0.050247, -0.138849, -0.023217, 0.349602, -0.046827,
-0.136901, -0.023662, -0.047322, -0.052646, -0.123023, 0.070707, -0.139035, 0.026563, 0.203153, 0.158154, -0.295285, -0.172226,
0.288937, 0.134910, 0.316985, 0.307205, -0.242438, 0.137308, 0.015859, 0.084676, -0.290939, -0.113800, 0.084737, -0.179408,
-0.011016, -0.005644, 0.058272, 0.015383, 0.281938, -0.143178, 0.132486, 0.298854, -0.150181, 0.152350, 0.233552, 0.260205,
-0.151112, -0.121383, -0.176814, 0.246908, 0.350480, -0.301868, 0.072104, 0.082258, -0.066671, -0.039658, -0.194553, 0.074579,
-0.111967, 0.045621, 0.158400, -0.198787, 0.140977, 0.035780, 0.198447, -0.413473, -0.062006, 0.334494, 0.234571, -0.120023,
-0.013898, -0.058350, 0.146759, -0.108308, 0.175173, 0.096613, 0.102819, -0.021839, 0.166413, -0.403056, 0.160527, -0.117778,
0.212619, 0.186657, 0.113079, 0.006225, 0.362346, 0.066195, -0.063140, 0.070245, 0.008429, -0.090678, -0.120599, 0.072881,
-0.164210, 0.316773, -0.159181, 0.072640, 0.195815, 0.026439, -0.094632, -0.016879, 0.368034, -0.213547, 0.040717, -0.032606,
-0.173578, 0.022296, -0.230112, 0.192950, 0.342216, 0.072015, 0.022535, -0.017886, 0.078934, 0.245005, -0.176358, 0.194632,
0.198938, -0.235501, 0.217921, 0.224428, 0.076777, -0.149250, 0.083223, -0.053421, 0.023047, 0.113928, 0.113739, -0.003850,
0.120225, 0.005392, 0.219475, -0.093177, -0.164009, -0.122763, 0.107693, 0.080645, -0.202891, -0.224479, -0.156684, 0.331784,
-0.004181, 0.149786, 0.163042, 0.029625, -0.122323, 0.196856, 0.187975, 0.192997, -0.214964, 0.284511, -0.131754, 0.082055,
-0.411840, 0.001655, -0.320392, -0.127360, 0.059408, 0.012098, 0.066806, 0.045007, -0.145612, 0.216809, 0.092957, 0.147580,
-0.071331, -0.004123, -0.170730, -0.004044, -0.124612, 0.132801, -0.315080, 0.030864, -0.244002, 0.252230, 0.052605, -0.130932,
0.049274, -0.371710, 0.076431, 0.008073, 0.138671, 0.006121, -0.171526, 0.493602, 0.152863, -0.280864, -0.070893, 0.185374,
0.000897, 0.199416, 0.224635, 0.159295, -0.092204, 0.285420, 0.213274, -0.076999, 0.085028, 0.085904, -0.247329, 0.194967,
0.087837, -0.306114, 0.376116, 0.046828, 0.060307, 0.156106, -0.033818, 0.234029, -0.160796, -0.149608, -0.236820, 0.153068,
0.199508, 0.104942, 0.205468, -0.023410, -0.107749, -0.007623, 0.114618, 0.232570, 0.075188, 0.334072, -0.101983, -0.165698,
-0.260141, -0.087506, 0.024403, -0.297563, -0.069149, -0.192792, -0.267491, -0.025246, 0.003549, -0.003354, -0.085121, -0.321569,
0.108840, 0.095682, -0.090460, 0.258373, 0.182871, -0.002903, 0.167313, -0.230786, -0.125454, -0.269224, -0.035217, 0.160893,
-0.308102, 0.176336, -0.001468, 0.059869, 0.045750, -0.183164, -0.178287, -0.296886, 0.344923, -0.189580, 0.314549, -0.076224,
0.077226, 0.021537, 0.088730, -0.276851, 0.157798, -0.150527, -0.008922, -0.078525, 0.084843, 0.106151, -0.390146, -0.116450,
-0.038389, -0.289112, -0.125809, 0.216394, -0.050708, -0.112639, 0.013483, 0.035798, -0.165015, -0.112613, -0.112982, 0.196625,
-0.230254, -0.039208, -0.283944, -0.040599, -0.277494, -0.004579, -0.152142, -0.115389, 0.056888, 0.386062, 0.066138, 0.056701,
0.058746, -0.006661, -0.114064, -0.179952, 0.017312, -0.089450, 0.076332, 0.151995, 0.192216, 0.159251, -0.011155, 0.356626,
-0.190141, 0.281370, -0.040255, 0.022947, -0.114394, -0.333408, 0.076984, 0.257763, -0.280461, -0.033105, 0.215402, 0.000335,
-0.274896, 0.152630, 0.045767, 0.147492, 0.292526, -0.166669, 0.090254, -0.270365, -0.022006, -0.054061, 0.118738, -0.270103,
-0.204609, 0.179905, -0.000347, -0.053868, 0.014229, 0.145024, 0.042751, 0.247980, -0.197676, -0.146668, 0.096783, -0.052364,
0.169954, 0.186467, -0.409802, 0.010214, 0.469952, 0.076517, -0.164903, 0.207414, 0.105366, 0.042632, 0.156091, -0.032799,
0.304285, 0.106517, 0.162189, -0.012162, -0.142632, 0.195133, 0.096281, -0.295245, -0.089724, -0.067148, 0.365544, 0.045032,
0.072368, -0.171726, -0.303827, 0.091773, -0.097696, 0.021023, -0.080348, 0.060826, -0.149219, 0.089142, -0.080173, -0.197527,
0.158109, -0.056374, 0.011020, -0.152228, 0.114029, -0.185801, 0.009832, -0.000454, 0.279764, -0.027766, -0.243382, -0.242298,
-0.213195, 0.091900, 0.303554, 0.193198, -0.148115, -0.106859, 0.039542, 0.166840, -0.117434, 0.242216, 0.061463, -0.265105,
-0.257379, 0.200923, 0.112193, 0.253540, 0.141226, -0.136884, 0.017207, 0.298030, 0.373820, -0.160918, 0.012224, 0.089508,
-0.294686, 0.008131, -0.020243, -0.131842, 0.054699, 0.425809, -0.160591, -0.042213, -0.170234, -0.031749, 0.073177, 0.358366,
0.131711, 0.041870, -0.269140, -0.131519, 0.156773, 0.151084, 0.075307, 0.201171, 0.010392, -0.302587, -0.094237, 0.017229,
0.057831, 0.139975, -0.105828, -0.092184, -0.160099, -0.104048, 0.322188, -0.122226, -0.117601, -0.360393, 0.036853, 0.042348,
0.200393, 0.111731, -0.216482, -0.137133, -0.152853, 0.042328, -0.082818, -0.060529, 0.486771, 0.182816, 0.276309, -0.099892,
0.055979, -0.194856, -0.069257, -0.059371, 0.109900, 0.239426, -0.198555, -0.142226, -0.011302, 0.090367, 0.018846, -0.011084,
-0.119265, 0.078257, -0.178771, 0.021939, 0.174719, 0.228886, 0.028142, -0.003305, 0.195300, 0.179884, -0.211045, -0.053834,
0.023009, -0.089472, -0.371861, 0.120114, -0.141836, -0.146524, -0.174923, 0.106537, 0.232986, -0.030994, -0.147361, -0.239028,
0.098641, 0.304555, -0.006283, -0.137634, 0.058236, 0.402192, -0.271280, 0.080470, -0.310664, 0.064620, -0.023688, 0.077768,
0.184833, -0.027363, 0.273871, 0.341284, -0.236773, 0.396328, -0.076777, 0.004614, -0.069572, 0.372939, 0.129041, 0.023743,
0.073828, -0.036462, 0.131440, 0.135126, 0.026850, 0.069182, 0.052512, -0.090051, 0.035517, -0.318536, 0.150497, 0.015619,
-0.217889, -0.004733, -0.213758, 0.092840, 0.040515, -0.040903, 0.329647, 0.043908, 0.385717, -0.121999, -0.157883, -0.226199,
-0.183759, 0.048138, -0.088948, 0.022817, -0.013305, 0.150213, -0.106877, -0.176648, -0.035636, -0.108001, 0.008761, 0.293531,
-0.014131, 0.017489, 0.117221, 0.459130, 0.054782, -0.003342, -0.033953, 0.194204, 0.241408, 0.310574, 0.040493, 0.118237,
0.030186, 0.283114, -0.109251, -0.146389, -0.242520, -0.021684, 0.002595, 0.121759, -0.156170, -0.126037, -0.069917, -0.367170,
-0.064923, 0.422745, -0.004663, 0.197588, -0.173317, -0.016845, -0.123587, -0.054437, -0.175755, -0.046291, -0.138703, 0.311616,
0.100015, 0.201603, 0.041629, -0.165862, -0.167971, 0.201196, 0.250619, -0.012424, 0.320281, 0.137843, 0.134456, 0.151322,
-0.108909, -0.170095, 0.059896, 0.455727, 0.194111, -0.106386, 0.236821, 0.169740, 0.042708, 0.060674, -0.193360, -0.058553,
0.145761, -0.087727, -0.295245, 0.289385, -0.071681, 0.061543, 0.181698, 0.013161, 0.080231, 0.038205, -0.150923, -0.183289,
-0.009277, -0.079759, -0.085177, 0.291922, 0.126226, -0.265765, -0.240982, -0.145480, -0.064917, 0.108380, 0.082269, 0.295763,
-0.281911, -0.223722, -0.004330, -0.118640, -0.203910, -0.303317, -0.049619, 0.117525, 0.122489, 0.003622, 0.318746, 0.309446,
0.237569, -0.058491, -0.111078, 0.115067, -0.075647, -0.141884, 0.051583, -0.106638, 0.166251, 0.142486, 0.130148, 0.167160,
0.011167, -0.023448, -0.311747, -0.093767, -0.078674, 0.039215, -0.056649, 0.221143, -0.131601, -0.038260, -0.000684, 0.167043,
0.151785, 0.100836, 0.265573, -0.081063, 0.380787, 0.114152, -0.178723, 0.055094, -0.101903, -0.001292, -0.017225, 0.040689,
-0.026634, 0.332444, 0.007262, 0.414328, 0.194499, 0.201725, -0.228020, -0.240213, 0.031173, 0.235317, 0.102001, -0.179048,
0.100928, -0.081213, -0.063748, 0.455394, 0.090115, 0.234455, -0.043900, 0.023705, 0.046483, -0.390414, 0.010713, -0.129712,
-0.145627, -0.117485, 0.034230, -0.301174, 0.098274, 0.091090, 0.107181, 0.069163, -0.058115, -0.015350, -0.013191, 0.275102,
-0.160061, 0.231730, 0.335458, -0.058543
};
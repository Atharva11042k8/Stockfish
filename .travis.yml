language: cpp
sudo: required
dist: trusty

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'g++-6-multilib', 'g++-multilib', 'valgrind', 'expect']
      env:
        - COMPILER=g++-6
        - COMP=gcc

    - os: linux
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['clang', 'g++-multilib', 'valgrind', 'expect']
      env:
        - COMPILER=clang++
        - COMP=clang

    - os: osx
      compiler: gcc
      env:
        - COMPILER=g++
        - COMP=gcc

    - os: osx
      compiler: clang
      env:
        - COMPILER=clang++ V='Apple LLVM 6.0' # Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM 3.5svn)
        - COMP=clang

branches:
  only:
   - master

before_script:
  - cd src

script:
  #
  # checking bench for various build types
  #
  - make clean && make ARCH=x86-64 build optimize=no debug=yes > /dev/null && make test
  - make clean && make ARCH=x86-64 build                       > /dev/null && make test
  - make clean && make ARCH=x86-32 build                       > /dev/null && make test
  #
  # perft
  #
  - make clean && make ARCH=x86-64 build > /dev/null && ../tests/perft.sh
  #
  # reproducible search
  #
  - make clean && make ARCH=x86-64 build > /dev/null && ../tests/reprosearch.sh
  #
  # valgrind
  #
  - if [ -x "$(command -v valgrind )" ]; then make clean && make ARCH=x86-64 debug=yes optimize=no build > /dev/null && ../tests/instrumented.sh --valgrind; fi
  #
  # sanitizer
  #
  # use g++-6 as a proxy for having sanitizers, might need revision as they become available for more recent versions of clang/gcc
  - if [[ "$COMPILER" == "g++-6" ]]; then make clean && make ARCH=x86-64 sanitize=yes build > /dev/null && ../tests/instrumented.sh --sanitizer; fi
